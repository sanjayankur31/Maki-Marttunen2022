'''
Neuron simulator export for:

Components:
    null (Type: notes)
    CaDynamics_E2_NML2 (Type: concentrationModelHayEtAl:  gamma=0.05 (dimensionless) minCai=1.0E-4 (SI concentration) decay=0.08 (SI time) depth=1.0E-7 (SI length) Faraday=96485.3 (SI charge_per_mole))
    null (Type: notes)
    CaDynamics_E2_NML2__decay460__gamma5_01Emin4 (Type: concentrationModelHayEtAl:  gamma=5.01E-4 (dimensionless) minCai=1.0E-4 (SI concentration) decay=0.46 (SI time) depth=1.0E-7 (SI length) Faraday=96485.3 (SI charge_per_mole))
    null (Type: notes)
    CaDynamics_E2_NML2__decay122__gamma5_09Emin4 (Type: concentrationModelHayEtAl:  gamma=5.09E-4 (dimensionless) minCai=1.0E-4 (SI concentration) decay=0.122 (SI time) depth=1.0E-7 (SI length) Faraday=96485.3 (SI charge_per_mole))
    null (Type: notes)
    pas (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    SK_E2 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    SKv3_1 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    K_Tst (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    K_Pst (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Ih (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    NaTa_t (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Nap_Et2 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Ca_HVA (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Ca_LVAst (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Im (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    L5PC (Type: cell)
    pulseGen_0 (Type: pulseGenerator:  delay=0.05 (SI time) duration=0.3 (SI time) amplitude=5.0E-10 (SI current))
    L5PC_net (Type: network)
    input_0_0nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=0.0 (SI current))
    input_0_1nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=1.0000000000000002E-10 (SI current))
    input_0_2nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=2.0000000000000003E-10 (SI current))
    input_0_30000000000000004nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=3.0000000000000005E-10 (SI current))
    input_0_4nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=4.0000000000000007E-10 (SI current))
    input_0_5nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=5.0E-10 (SI current))
    input_0_6000000000000001nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=6.000000000000001E-10 (SI current))
    input_0_7000000000000001nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=7.000000000000001E-10 (SI current))
    input_0_8nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=8.000000000000001E-10 (SI current))
    input_0_9nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=9.000000000000001E-10 (SI current))
    input_1_0nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=1.0E-9 (SI current))
    input_1_1nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=1.1000000000000001E-9 (SI current))
    input_1_2000000000000002nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=1.2000000000000002E-9 (SI current))
    input_1_3nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=1.3E-9 (SI current))
    input_1_4000000000000001nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=1.4000000000000001E-9 (SI current))
    input_1_5nA (Type: pulseGenerator:  delay=0.3 (SI time) duration=2.2 (SI time) amplitude=1.5000000000000002E-9 (SI current))
    network_of_L5PC (Type: networkWithTemperature:  temperature=307.15 (SI temperature))
    iv_L5PC (Type: Simulation:  length=2.8000000000000003 (SI time) step=5.0E-5 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.9.0
         org.neuroml.model   v1.9.0
         jLEMS               v0.10.7

'''

import neuron

import time
import datetime
import sys

import hashlib
h = neuron.h
h.load_file("stdlib.hoc")

h.load_file("stdgui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt, seed=12345):

        print("\n    Starting simulation in NEURON of %sms generated from NeuroML2 model...\n"%tstop)

        self.setup_start = time.time()
        self.seed = seed
        self.randoms = []
        self.next_global_id = 0  # Used in Random123 classes for elements using random(), etc. 

        self.next_spiking_input_id = 0  # Used in Random123 classes for elements using random(), etc. 

        '''
        Adding simulation Component(id=iv_L5PC type=Simulation) of network/component: network_of_L5PC (Type: networkWithTemperature:  temperature=307.15 (SI temperature))
        
        '''

        # Temperature used for network: 307.15 K
        h.celsius = 307.15 - 273.15

        # ######################   Population: population_of_L5PC
        print("Population population_of_L5PC contains 16 instance(s) of component: L5PC of type: cell")

        print("Setting the default initial concentrations for ca (used in L5PC) to 5.0E-5 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 5.0E-5")
        h("cao0_ca_ion = 2.0")

        print("Setting the default initial concentrations for ca (used in L5PC) to 5.0E-5 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 5.0E-5")
        h("cao0_ca_ion = 2.0")

        h.load_file("L5PC.hoc")
        a_population_of_L5PC = []
        h("{ n_population_of_L5PC = 16 }")
        h("objectvar a_population_of_L5PC[n_population_of_L5PC]")
        for i in range(int(h.n_population_of_L5PC)):
            h("a_population_of_L5PC[%i] = new L5PC()"%i)
            h("access a_population_of_L5PC[%i].soma_0"%i)

            self.next_global_id+=1


        h("proc initialiseV_population_of_L5PC() { for i = 0, n_population_of_L5PC-1 { a_population_of_L5PC[i].set_initial_v() } }")
        h("objref fih_population_of_L5PC")
        h('{fih_population_of_L5PC = new FInitializeHandler(0, "initialiseV_population_of_L5PC()")}')

        h("proc initialiseIons_population_of_L5PC() { for i = 0, n_population_of_L5PC-1 { a_population_of_L5PC[i].set_initial_ion_properties() } }")
        h("objref fih_ion_population_of_L5PC")
        h('{fih_ion_population_of_L5PC = new FInitializeHandler(1, "initialiseIons_population_of_L5PC()")}')

        print("Processing 16 input lists")

        # ######################   Input List: input_0_0nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_0_0nA_0")
        h("a_population_of_L5PC[0].soma_0 { input_0_0nA_0 = new input_0_0nA(0.024999658) } ")

        # ######################   Input List: input_0_1nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_0_1nA_0")
        h("a_population_of_L5PC[1].soma_0 { input_0_1nA_0 = new input_0_1nA(0.024999658) } ")

        # ######################   Input List: input_0_2nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_0_2nA_0")
        h("a_population_of_L5PC[2].soma_0 { input_0_2nA_0 = new input_0_2nA(0.024999658) } ")

        # ######################   Input List: input_0_30000000000000004nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_0_30000000000000004nA_0")
        h("a_population_of_L5PC[3].soma_0 { input_0_30000000000000004nA_0 = new input_0_30000000000000004nA(0.024999658) } ")

        # ######################   Input List: input_0_4nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_0_4nA_0")
        h("a_population_of_L5PC[4].soma_0 { input_0_4nA_0 = new input_0_4nA(0.024999658) } ")

        # ######################   Input List: input_0_5nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_0_5nA_0")
        h("a_population_of_L5PC[5].soma_0 { input_0_5nA_0 = new input_0_5nA(0.024999658) } ")

        # ######################   Input List: input_0_6000000000000001nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_0_6000000000000001nA_0")
        h("a_population_of_L5PC[6].soma_0 { input_0_6000000000000001nA_0 = new input_0_6000000000000001nA(0.024999658) } ")

        # ######################   Input List: input_0_7000000000000001nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_0_7000000000000001nA_0")
        h("a_population_of_L5PC[7].soma_0 { input_0_7000000000000001nA_0 = new input_0_7000000000000001nA(0.024999658) } ")

        # ######################   Input List: input_0_8nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_0_8nA_0")
        h("a_population_of_L5PC[8].soma_0 { input_0_8nA_0 = new input_0_8nA(0.024999658) } ")

        # ######################   Input List: input_0_9nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_0_9nA_0")
        h("a_population_of_L5PC[9].soma_0 { input_0_9nA_0 = new input_0_9nA(0.024999658) } ")

        # ######################   Input List: input_1_0nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_1_0nA_0")
        h("a_population_of_L5PC[10].soma_0 { input_1_0nA_0 = new input_1_0nA(0.024999658) } ")

        # ######################   Input List: input_1_1nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_1_1nA_0")
        h("a_population_of_L5PC[11].soma_0 { input_1_1nA_0 = new input_1_1nA(0.024999658) } ")

        # ######################   Input List: input_1_2000000000000002nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_1_2000000000000002nA_0")
        h("a_population_of_L5PC[12].soma_0 { input_1_2000000000000002nA_0 = new input_1_2000000000000002nA(0.024999658) } ")

        # ######################   Input List: input_1_3nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_1_3nA_0")
        h("a_population_of_L5PC[13].soma_0 { input_1_3nA_0 = new input_1_3nA(0.024999658) } ")

        # ######################   Input List: input_1_4000000000000001nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_1_4000000000000001nA_0")
        h("a_population_of_L5PC[14].soma_0 { input_1_4000000000000001nA_0 = new input_1_4000000000000001nA(0.024999658) } ")

        # ######################   Input List: input_1_5nA
        # Adding single input: Component(id=0 type=input)
        h("objref input_1_5nA_0")
        h("a_population_of_L5PC[15].soma_0 { input_1_5nA_0 = new input_1_5nA(0.024999658) } ")

        print("Finished processing 16 input lists")

        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        h.dt = dt

        h.steps_per_ms = 1/h.dt



        # ######################   File to save: iv_L5PC.v.dat (Volts_file)
        # Column: population_of_L5PC[0]/v
        h(' objectvar v_v_cell0_Volts_file ')
        h(' { v_v_cell0_Volts_file = new Vector() } ')
        h(' { v_v_cell0_Volts_file.record(&a_population_of_L5PC[0].soma_0.v(0.024999658)) } ')
        h.v_v_cell0_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[1]/v
        h(' objectvar v_v_cell1_Volts_file ')
        h(' { v_v_cell1_Volts_file = new Vector() } ')
        h(' { v_v_cell1_Volts_file.record(&a_population_of_L5PC[1].soma_0.v(0.024999658)) } ')
        h.v_v_cell1_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[2]/v
        h(' objectvar v_v_cell2_Volts_file ')
        h(' { v_v_cell2_Volts_file = new Vector() } ')
        h(' { v_v_cell2_Volts_file.record(&a_population_of_L5PC[2].soma_0.v(0.024999658)) } ')
        h.v_v_cell2_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[3]/v
        h(' objectvar v_v_cell3_Volts_file ')
        h(' { v_v_cell3_Volts_file = new Vector() } ')
        h(' { v_v_cell3_Volts_file.record(&a_population_of_L5PC[3].soma_0.v(0.024999658)) } ')
        h.v_v_cell3_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[4]/v
        h(' objectvar v_v_cell4_Volts_file ')
        h(' { v_v_cell4_Volts_file = new Vector() } ')
        h(' { v_v_cell4_Volts_file.record(&a_population_of_L5PC[4].soma_0.v(0.024999658)) } ')
        h.v_v_cell4_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[5]/v
        h(' objectvar v_v_cell5_Volts_file ')
        h(' { v_v_cell5_Volts_file = new Vector() } ')
        h(' { v_v_cell5_Volts_file.record(&a_population_of_L5PC[5].soma_0.v(0.024999658)) } ')
        h.v_v_cell5_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[6]/v
        h(' objectvar v_v_cell6_Volts_file ')
        h(' { v_v_cell6_Volts_file = new Vector() } ')
        h(' { v_v_cell6_Volts_file.record(&a_population_of_L5PC[6].soma_0.v(0.024999658)) } ')
        h.v_v_cell6_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[7]/v
        h(' objectvar v_v_cell7_Volts_file ')
        h(' { v_v_cell7_Volts_file = new Vector() } ')
        h(' { v_v_cell7_Volts_file.record(&a_population_of_L5PC[7].soma_0.v(0.024999658)) } ')
        h.v_v_cell7_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[8]/v
        h(' objectvar v_v_cell8_Volts_file ')
        h(' { v_v_cell8_Volts_file = new Vector() } ')
        h(' { v_v_cell8_Volts_file.record(&a_population_of_L5PC[8].soma_0.v(0.024999658)) } ')
        h.v_v_cell8_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[9]/v
        h(' objectvar v_v_cell9_Volts_file ')
        h(' { v_v_cell9_Volts_file = new Vector() } ')
        h(' { v_v_cell9_Volts_file.record(&a_population_of_L5PC[9].soma_0.v(0.024999658)) } ')
        h.v_v_cell9_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[10]/v
        h(' objectvar v_v_cell10_Volts_file ')
        h(' { v_v_cell10_Volts_file = new Vector() } ')
        h(' { v_v_cell10_Volts_file.record(&a_population_of_L5PC[10].soma_0.v(0.024999658)) } ')
        h.v_v_cell10_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[11]/v
        h(' objectvar v_v_cell11_Volts_file ')
        h(' { v_v_cell11_Volts_file = new Vector() } ')
        h(' { v_v_cell11_Volts_file.record(&a_population_of_L5PC[11].soma_0.v(0.024999658)) } ')
        h.v_v_cell11_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[12]/v
        h(' objectvar v_v_cell12_Volts_file ')
        h(' { v_v_cell12_Volts_file = new Vector() } ')
        h(' { v_v_cell12_Volts_file.record(&a_population_of_L5PC[12].soma_0.v(0.024999658)) } ')
        h.v_v_cell12_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[13]/v
        h(' objectvar v_v_cell13_Volts_file ')
        h(' { v_v_cell13_Volts_file = new Vector() } ')
        h(' { v_v_cell13_Volts_file.record(&a_population_of_L5PC[13].soma_0.v(0.024999658)) } ')
        h.v_v_cell13_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[14]/v
        h(' objectvar v_v_cell14_Volts_file ')
        h(' { v_v_cell14_Volts_file = new Vector() } ')
        h(' { v_v_cell14_Volts_file.record(&a_population_of_L5PC[14].soma_0.v(0.024999658)) } ')
        h.v_v_cell14_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)
        # Column: population_of_L5PC[15]/v
        h(' objectvar v_v_cell15_Volts_file ')
        h(' { v_v_cell15_Volts_file = new Vector() } ')
        h(' { v_v_cell15_Volts_file.record(&a_population_of_L5PC[15].soma_0.v(0.024999658)) } ')
        h.v_v_cell15_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)

        # ######################   File to save: time.dat (time)
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' { v_time.record(&t) } ')
        h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        self.initialized = False

        self.sim_end = -1 # will be overwritten

        setup_end = time.time()
        self.setup_time = setup_end - self.setup_start
        print("Setting up the network to simulate took %f seconds"%(self.setup_time))

    def run(self):

        self.initialized = True
        sim_start = time.time()
        print("Running a simulation of %sms (dt = %sms; seed=%s)" % (h.tstop, h.dt, self.seed))

        try:
            h.run()
        except Exception as e:
            print("Exception running NEURON: %s" % (e))
            quit()


        self.sim_end = time.time()
        self.sim_time = self.sim_end - sim_start
        print("Finished NEURON simulation in %f seconds (%f mins)..."%(self.sim_time, self.sim_time/60.0))

        try:
            self.save_results()
        except Exception as e:
            print("Exception saving results of NEURON simulation: %s" % (e))
            quit()


    def advance(self):

        if not self.initialized:
            h.finitialize()
            self.initialized = True

        h.fadvance()


    ###############################################################################
    # Hash function to use in generation of random value
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _id32 (self,obj): 
        return int(hashlib.md5(obj.encode('utf-8')).hexdigest()[0:8],16)  # convert 8 first chars of md5 hash in base 16 to int


    ###############################################################################
    # Initialize the stim randomizer
    # This is copied from NetPyNE: https://github.com/Neurosim-lab/netpyne/blob/master/netpyne/simFuncs.py
    ###############################################################################
    def _init_stim_randomizer(self,rand, stimType, gid, seed): 
        #print("INIT STIM  %s; %s; %s; %s"%(rand, stimType, gid, seed))
        rand.Random123(self._id32(stimType), gid, seed)


    def save_results(self):

        print("Saving results at t=%s..."%h.t)

        if self.sim_end < 0: self.sim_end = time.time()


        # ######################   File to save: time.dat (time)
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...
        f_time_f2.close()
        print("Saved data to: time.dat")

        # ######################   File to save: iv_L5PC.v.dat (Volts_file)
        py_v_v_cell0_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell0_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell1_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell1_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell2_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell2_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell3_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell3_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell4_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell4_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell5_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell5_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell6_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell6_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell7_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell7_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell8_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell8_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell9_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell9_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell10_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell10_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell11_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell11_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell12_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell12_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell13_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell13_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell14_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell14_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage
        py_v_v_cell15_Volts_file = [ float(x  / 1000.0) for x in h.v_v_cell15_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage

        f_Volts_file_f2 = open('iv_L5PC.v.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_Volts_file_f2.write('%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t%e\t\n' % (py_v_time[i], py_v_v_cell0_Volts_file[i], py_v_v_cell1_Volts_file[i], py_v_v_cell2_Volts_file[i], py_v_v_cell3_Volts_file[i], py_v_v_cell4_Volts_file[i], py_v_v_cell5_Volts_file[i], py_v_v_cell6_Volts_file[i], py_v_v_cell7_Volts_file[i], py_v_v_cell8_Volts_file[i], py_v_v_cell9_Volts_file[i], py_v_v_cell10_Volts_file[i], py_v_v_cell11_Volts_file[i], py_v_v_cell12_Volts_file[i], py_v_v_cell13_Volts_file[i], py_v_v_cell14_Volts_file[i], py_v_v_cell15_Volts_file[i], ))
        f_Volts_file_f2.close()
        print("Saved data to: iv_L5PC.v.dat")

        save_end = time.time()
        save_time = save_end - self.sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

        quit()


if __name__ == '__main__':

    ns = NeuronSimulation(tstop=2800, dt=0.05, seed=12345)

    ns.run()

